#!/usr/bin/env pike

import Public.Parser.Yaml;

#define INDENT() write ("%s", "  " * (depth++));
#define UNINDENT() write ("%s", "  " * (--depth));

class TestParser
{
  inherit Parser;

  private constant STATE_KEY = 0;
  private int depth = 0;

  mixed test (string file_or_data, function callback)
  {
    if (Stdio.exist (file_or_data))
      set_input_file (file_or_data);

    int type;

    while ((type = parse ())) {
      switch (type)
      {
        case STREAM_START_EVENT:
          INDENT ();
          write ("Stream Start\n");
          break;

        case STREAM_END_EVENT:
          UNINDENT ();
          write ("Stream End\n");
          break;

        case DOCUMENT_START_EVENT:
          INDENT ();
          write ("Document Start\n");
          break;

        case DOCUMENT_END_EVENT:
          UNINDENT ();
          write ("Document End\n");
          break;

        case SEQUENCE_START_EVENT:
          INDENT ();
          write ("Sequence Start\n");
/*
          EventData sd = get_event ();
          if (sd->sequence_start->tag || sd->sequence_start->anchor)
            werror ("Got sequence data: %O\n", sd->sequence_start);
*/

          break;

        case SEQUENCE_END_EVENT:
          UNINDENT ();
          write ("Sequence End\n");
          break;

        case MAPPING_START_EVENT:
          INDENT ();
          write ("Mapping Start\n");
/*
          EventData md = get_event ();
          if (md->mapping_start->tag || md->mapping_start->anchor)
            werror ("Got mapping start data: %O\n", md->mapping_start);
*/
          break;

        case MAPPING_END_EVENT:
          UNINDENT ();
          write ("Mapping End\n");
          break;

        case SCALAR_EVENT:
          INDENT ();
          EventData data = get_event ();

          /*
          write ("Scalar: %5s %s\n",
                 "(" + data->scalar->length + ")", data->scalar->value);
          */

          write ("Scalar: %O\n", data->scalar->value);

          if (::peek_event ()->type == SEQUENCE_START_EVENT)
            write ("[Next event is SEQUENCE_START_EVENT]\n");

          depth--;
          break;
      }
    }
  }
}

int main(int argc, array(string) argv)
{
#if 0
  write("\nThis is \"%O %s\" by \"%s\"\n\n",
        Public.Parser.Yaml.module, __version, __author);

  foreach (sort(indices(Public.Parser.Yaml)), string k)
    write( "  * %s: %O\n", k, Public.Parser.Yaml[k] );

  write ("\nlibyaml version: %s\n", get_version_string ());

  mapping (string:int) version = get_version ();
  write ("%O\n", version);
#endif

  TestParser p = TestParser ();
  p->set_encoding (UTF8_ENCODING);

  string file = combine_path(dirname(__FILE__), "example.yaml");
  //p->set_input_string (Stdio.read_file (file));

  p->test (file, lambda (mixed data) {
    werror ("Data\n");
  });

  //werror ("%O\n", data);

/*
  p->set_input_file (combine_path(dirname(__FILE__), "public.yaml"));
*/
/*
  int type;

  while (type = p->parse ()) {
    //werror ("TYPE0: %O\n", type);
    mixed x = p->get_event ();

    if (type == ALIAS_EVENT)
      werror ("%O\n", x);
  }
*/
  //mapping (string:int) version = get_version ();
  //write ("%O\n", version);
}
